#!/usr/bin/env python3
# encoding: utf-8
import time
import hashlib

from malwares_api import Api
from cortexutils.analyzer import Analyzer

try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO


class MalwaresAnalyzer(Analyzer):

    def __init__(self):
        Analyzer.__init__(self)
        self.service = self.get_param('config.service', None, 'Service parameter is missing')
        self.key = self.get_param('config.key', None, 'Missing Malware API key')
        self.polling_interval = self.get_param('config.polling_interval', 60)
        self.m_api = Api(self.key)

    def wait_file_report(self, id):
        results = self.check_response(self.m_api.get_file_report(id))
        code = results.get('result_code', None)
        if code == 1:
            self.report(results)
        else:
            time.sleep(self.polling_interval)
            self.wait_file_report(id)

    def wait_url_report(self, id):
        results = self.check_response(self.m_api.get_url_report(id))
        code = results.get('result_code', None)
        if code == 1:
            self.report(results)
        else:
            time.sleep(self.polling_interval)
            self.wait_url_report(id)

    def check_response(self, response):
        if type(response) is not dict:
            self.error('Bad response : ' + str(response))
        status = response.get('response_code', -1)
        if status in (-14, -15):
            self.error('Malwares api rate limit exceeded.')
        elif int(status) < 1:
            self.error('Bad status : ' + str(status))
        results = response.get('results', {})
        return results

        # 0 => not found
        # -2 => in queue
        # 1 => ready

    def read_scan_response(self, response, func):
        results = self.check_response(response)
        code = results.get('result_code', None)
        md5 = results.get('md5', None)
        url = results.get('url', None)
        if code in (1, 2) and md5 is not None:
            func(md5)
        elif code in (1, 2) and url is not None:
            func(url)
        else:
            self.error('%d %s %s - Scan not found' % (code, md5, url))

    def summary(self, raw):
        taxonomies = []
        level = "info"
        namespace = "Malwares"
        predicate = "Score"
        value = "No info"
        score = -1

        result = {
            "has_result": True
        }

        if "ai_score" in raw.keys():
            score = raw["ai_score"]
            if score < 10:
                level = "safe"
            elif 10 <= score < 30:
                level = "suspicious"
            else:
                level = "malicious"

            result['score'] = score

            value = "{}/100".format(score)

        else:
            if "detected_communicating_file" in raw.keys() or "detected_url" in raw.keys() or "detected_downloaded_file" in raw.keys():
                score = max(
                    raw.get("detected_communicating_file", {}).get("total", 0),
                    raw.get("detected_url", {}).get("total", 0),
                    raw.get("detected_downloaded_file", {}).get("total", 0)
                )
                value = "{} results".format(score)

            elif "virustotal" in raw.keys():
                score = raw.get("virustotal", {}).get("positives", 0)
                total = raw.get("virustotal", {}).get("total", 0)
                value = "{}/{} positives".format(score, total)

            if score == 0:
                level = "safe"
            elif 0 < score <= 5:
                level = "suspicious"
            elif score > 5:
                level = "malicious"

        taxonomies.append(self.build_taxonomy(
            level, namespace, predicate, value))
        return {"taxonomies": taxonomies}

    def run(self):
        if self.service == 'scan':
            if self.data_type == 'file':
                filename = self.get_param('filename', 'noname.ext')
                filepath = self.get_param('file', None, 'File is missing')
                self.read_scan_response(self.m_api.scan_file(
                    open(filepath, 'rb'), filename), self.wait_file_report)
            elif self.data_type == 'url':
                data = self.get_param('data', None, 'Data is missing')
                self.read_scan_response(
                    self.m_api.scan_url(data), self.wait_url_report)
            else:
                self.error('Invalid data type')
        elif self.service == 'get':
            if self.data_type == 'domain':
                data = self.get_param('data', None, 'Data is missing')
                self.report(self.check_response(
                    self.m_api.get_domain_report(data)))
            elif self.data_type == 'ip':
                data = self.get_param('data', None, 'Data is missing')
                self.report(self.check_response(self.m_api.get_ip_report(data)))
            elif self.data_type == 'file':

                hashes = self.get_param('attachment.hashes',
                                       None)
                if hashes is None:
                    filepath = self.get_param('file', None, 'File is missing')
                    hash = hashlib.sha256(open(filepath, 'rb').read()).hexdigest();
                else:
                    # find SHA256 hash
                    hash = next(h for h in hashes if len(h) == 64)

                self.report(self.check_response(self.m_api.get_file_report(hash)))

            elif self.data_type == 'hash':
                data = self.get_param('data', None, 'Data is missing')
                self.report(self.check_response(self.m_api.get_file_report(data)))
            else:
                self.error('Invalid data type')
        else:
            self.error('Invalid service')


if __name__ == '__main__':
    MalwaresAnalyzer().run()
